// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name SwiftyZeroMQ
import Foundation
import Swift
@_exported import SwiftyZeroMQ
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension SwiftyZeroMQ.SwiftyZeroMQ {
  public class Context : Swift.Hashable {
    public var handle: Swift.UnsafeMutableRawPointer?
    public init() throws
    @objc deinit
    public func shutdown() throws
    public func terminate() throws
    public func close() throws
    public func socket(_ type: SwiftyZeroMQ.SwiftyZeroMQ.SocketType) throws -> SwiftyZeroMQ.SwiftyZeroMQ.Socket
    public func isBlocky() throws -> Swift.Bool
    public func setBlocky(_ enabled: Swift.Bool = true) throws
    public func getIOThreads() throws -> Swift.Int
    public func setIOThreads(_ value: Swift.Int = 1) throws
    public func setThreadSchedulingPolicy(_ value: Swift.Int = -1) throws
    public func setThreadPriority(_ value: Swift.Int = -1) throws
    public func getMaxMessageSize() throws -> Swift.Int
    public func setMaxMessageSize(_ size: Swift.Int = Int(Int32.max)) throws
    public func getMaxSockets() throws -> Swift.Int
    public func setMaxSockets(_ value: Swift.Int = 1024) throws
    public func isIPV6Enabled() throws -> Swift.Bool
    public func setIPV6Enabled(_ enabled: Swift.Bool = false) throws
    public func getSocketLimit() throws -> Swift.Int
    public var hashValue: Swift.Int {
      get
    }
    public static func == (lhs: SwiftyZeroMQ.SwiftyZeroMQ.Context, rhs: SwiftyZeroMQ.SwiftyZeroMQ.Context) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
  }
}
public struct SwiftyZeroMQ {
  public enum Capability : Swift.String {
    case ipc
    case pgm
    case tipc
    case norm
    case curve
    case gssapi
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public static var version: (major: Swift.Int, minor: Swift.Int, patch: Swift.Int, versionString: Swift.String) {
    get
  }
  public static var frameworkVersion: Swift.String {
    get
  }
  public static func has(_ capability: SwiftyZeroMQ.SwiftyZeroMQ.Capability) -> Swift.Bool
  public static func proxy(frontend: SwiftyZeroMQ.SwiftyZeroMQ.Socket, backend: SwiftyZeroMQ.SwiftyZeroMQ.Socket, capture: SwiftyZeroMQ.SwiftyZeroMQ.Socket? = nil) throws
}
extension SwiftyZeroMQ.SwiftyZeroMQ {
  public enum SocketSendRecvOption : Swift.Int32 {
    case none
    case dontWait
    case sendMore
    case dontWaitSendMore
    public var rawValue: Swift.Int32 {
      get
    }
    public func isValidRecvOption() -> Swift.Bool
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
  }
}
extension SwiftyZeroMQ.SwiftyZeroMQ {
  public struct PollFlags : Swift.OptionSet {
    public var rawValue: Swift.Int32
    public init(rawValue: Swift.Int32)
    public static let pollIn: SwiftyZeroMQ.SwiftyZeroMQ.PollFlags
    public static let pollOut: SwiftyZeroMQ.SwiftyZeroMQ.PollFlags
    public static let pollErr: SwiftyZeroMQ.SwiftyZeroMQ.PollFlags
    public static let none: SwiftyZeroMQ.SwiftyZeroMQ.PollFlags
    public typealias ArrayLiteralElement = SwiftyZeroMQ.SwiftyZeroMQ.PollFlags
    public typealias Element = SwiftyZeroMQ.SwiftyZeroMQ.PollFlags
    public typealias RawValue = Swift.Int32
  }
  public class Poller {
    public init()
    public func register(socket: SwiftyZeroMQ.SwiftyZeroMQ.Socket, flags: SwiftyZeroMQ.SwiftyZeroMQ.PollFlags = [.pollIn, .pollOut]) throws
    public func modify(socket: SwiftyZeroMQ.SwiftyZeroMQ.Socket, flags: SwiftyZeroMQ.SwiftyZeroMQ.PollFlags = [.pollIn, .pollOut]) throws
    public func unregister(socket: SwiftyZeroMQ.SwiftyZeroMQ.Socket) throws
    public func poll(timeout: Foundation.TimeInterval? = nil) throws -> [SwiftyZeroMQ.SwiftyZeroMQ.Socket : SwiftyZeroMQ.SwiftyZeroMQ.PollFlags]
    @objc deinit
  }
}
extension SwiftyZeroMQ.SwiftyZeroMQ {
  public struct ZeroMQError : Swift.Error, Swift.CustomStringConvertible {
    public let description: Swift.String
    public static var last: SwiftyZeroMQ.SwiftyZeroMQ.ZeroMQError {
      get
    }
    public static var invalidOption: SwiftyZeroMQ.SwiftyZeroMQ.ZeroMQError {
      get
    }
    public static var unimplemented: SwiftyZeroMQ.SwiftyZeroMQ.ZeroMQError {
      get
    }
  }
}
extension SwiftyZeroMQ.SwiftyZeroMQ {
  public class Socket : Swift.Hashable {
    public var handle: Swift.UnsafeMutableRawPointer?
    public init(context: SwiftyZeroMQ.SwiftyZeroMQ.Context, type: SwiftyZeroMQ.SwiftyZeroMQ.SocketType) throws
    @objc deinit
    public func connect(_ endpoint: Swift.String) throws
    public func close() throws
    public func bind(_ endpoint: Swift.String) throws
    public func unbind(_ endpoint: Swift.String) throws
    public func send(string: Swift.String, options: SwiftyZeroMQ.SwiftyZeroMQ.SocketSendRecvOption = .none) throws
    public func send(data: Foundation.Data, options: SwiftyZeroMQ.SwiftyZeroMQ.SocketSendRecvOption = .none) throws
    public func sendMultipart(parts: Swift.Array<Foundation.Data>) throws
    public func recvMultipart() throws -> Swift.Array<Foundation.Data>
    public func recv(bufferLength: Swift.Int = 256, options: SwiftyZeroMQ.SwiftyZeroMQ.SocketSendRecvOption = .none) throws -> Swift.String?
    public var hashValue: Swift.Int {
      get
    }
    public static func == (lhs: SwiftyZeroMQ.SwiftyZeroMQ.Socket, rhs: SwiftyZeroMQ.SwiftyZeroMQ.Socket) -> Swift.Bool
    public func setSubscribe(_ value: Swift.String?) throws
    public func setUnsubscribe(_ value: Swift.String?) throws
    public func setAffinity(_ value: Swift.UInt64) throws
    public func setLinger(_ value: Swift.Int32) throws
    public func setRecvHighWaterMark(_ value: Swift.Int32) throws
    public func setSendHighWaterMark(_ value: Swift.Int32) throws
    public func setMulticastRate(_ value: Swift.Int32) throws
    public func setMulticastRecoveryInterval(_ value: Swift.Int32) throws
    public func setSendBufferSize(_ value: Swift.Int32) throws
    public func setRecvBufferSize(_ value: Swift.Int32) throws
    public func setReconnectInterval(_ value: Swift.Int32) throws
    public func setMaxReconnectInterval(_ value: Swift.Int32) throws
    public func curveKeyPair() throws -> (publicKey: Swift.String, secretKey: Swift.String)
    public func setupCurveSecurityOnClientWithServerPublicKey(_ serverPublicKey: Swift.String, clientPublicKey: Swift.String, clientSecretKey: Swift.String) throws
    public func setupCurveSecurityOnServerWithServerSecretKey(_ serverSecretKey: Swift.String, serverPublicKey: Swift.String) throws
    public func setBacklog(_ value: Swift.Int32) throws
    public func getAffinity() throws -> Swift.UInt64
    public func getLinger() throws -> Swift.Int32
    public func getRecvHighWaterMark() throws -> Swift.Int32
    public func getSendHighWaterMark() throws -> Swift.UInt32
    public func getMulticastRate() throws -> Swift.Int32
    public func getMulticastRecoveryInterval() throws -> Swift.Int32
    public func getSendBufferSize() throws -> Swift.UInt32
    public func getRecvBufferSize() throws -> Swift.UInt32
    public func getReconnectInterval() throws -> Swift.UInt32
    public func getMaxReconnectInterval() throws -> Swift.UInt32
    public func getBacklog() throws -> Swift.UInt32
    public func setIntegerSocketOption(_ option: Swift.Int32, _ value: Swift.Int32) throws
    public func setUnsignedIntegerSocketOption(_ option: Swift.Int32, _ value: Swift.UInt64) throws
    public func setStringSocketOption(_ option: Swift.Int32, _ value: Swift.String?) throws
    public func hash(into hasher: inout Swift.Hasher)
  }
}
extension SwiftyZeroMQ.SwiftyZeroMQ {
  public enum SocketType : Swift.Int32 {
    case request
    case reply
    case dealer
    case router
    case publish
    case subscribe
    case xpublish
    case xsubscribe
    case push
    case pull
    case pair
    case stream
    public var rawValue: Swift.Int32 {
      get
    }
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
  }
}
extension SwiftyZeroMQ.SwiftyZeroMQ.Capability : Swift.Equatable {}
extension SwiftyZeroMQ.SwiftyZeroMQ.Capability : Swift.Hashable {}
extension SwiftyZeroMQ.SwiftyZeroMQ.Capability : Swift.RawRepresentable {}
extension SwiftyZeroMQ.SwiftyZeroMQ.SocketSendRecvOption : Swift.Equatable {}
extension SwiftyZeroMQ.SwiftyZeroMQ.SocketSendRecvOption : Swift.Hashable {}
extension SwiftyZeroMQ.SwiftyZeroMQ.SocketSendRecvOption : Swift.RawRepresentable {}
extension SwiftyZeroMQ.SwiftyZeroMQ.SocketType : Swift.Equatable {}
extension SwiftyZeroMQ.SwiftyZeroMQ.SocketType : Swift.Hashable {}
extension SwiftyZeroMQ.SwiftyZeroMQ.SocketType : Swift.RawRepresentable {}
